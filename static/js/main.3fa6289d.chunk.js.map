{"version":3,"sources":["components/section.js","components/contacts.js","components/form.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","Contacts","this","props","state","contacts","map","home","name","shortid","generate","Component","INITIAL_STATE","id","number","filter","Form","addContact","e","preventDefault","contact","target","value","setState","action","onSubmit","htmlFor","type","onChange","handleChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QACe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACrC,OACI,oCACI,6BACKD,IAEJC,K,ICOEC,E,uKARP,OACI,cAACH,EAAD,CAASC,MAAM,aAAf,SACKG,KAAKC,MAAMC,MAAMC,SAASC,KAAI,SAAAC,GAAI,OAAI,8BAA+BA,EAAKC,MAA1BC,IAAQC,qB,GALlDC,aCAjBC,EAAgB,CAClBP,SAAU,CACN,CAAEQ,GAAI,OAAQL,KAAM,gBAAiBM,OAAQ,aAC7C,CAAED,GAAI,OAAQL,KAAM,iBAAkBM,OAAQ,aAC9C,CAAED,GAAI,OAAQL,KAAM,gBAAiBM,OAAQ,aAC7C,CAAED,GAAI,OAAQL,KAAM,iBAAkBM,OAAQ,cAElDC,OAAQ,GACRP,KAAM,GACNM,OAAQ,IAwCGE,E,4MArCXZ,M,eACOQ,G,EAGPE,OAASL,IAAQC,W,EAEjBO,WAAa,SAAAC,GACTA,EAAEC,iBADY,IAGRC,EAAU,CACZ,KAFaF,EAAEG,OAAXb,KAESc,MACb,GAAMb,IAAQC,YAElB,EAAKa,SAAS,CAAElB,SAAS,GAAD,mBAAM,EAAKD,MAAMC,UAAjB,CAA2Be,O,uDAKnD,OACI,gCACI,uBAAMI,OAAO,GAAGC,SAAUvB,KAAKe,WAA/B,UAEI,wBAAOS,QAAQ,OAAf,iBAEA,uBAAOC,KAAK,OAAOd,GAAG,OAAOe,SAAU1B,KAAK2B,kBAE5C,uBAEA,wBAAQF,KAAK,SAAb,4BAEJ,cAAC,EAAD,CAAUvB,MAAOF,KAAKE,e,GA/BnBO,aCKJmB,E,4MAdb1B,MAAQ,CACNC,SAAU,GACVG,KAAM,I,uDAIN,OACE,cAAC,EAAD,CAAMJ,MAAOF,KAAKE,Y,GARNO,aCQHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3fa6289d.chunk.js","sourcesContent":["\nexport default function Section({ title, children }) {\n    return (\n        <section>\n            <h2>\n                {title}\n            </h2>\n            {children}\n        </section>\n    )\n}","import React, { Component } from 'react'\nimport Section from './section'\nimport shortid from 'shortid'\nclass Contacts extends Component {\n\n    render() {\n        return (\n            <Section title=\"Statistics\">\n                {this.props.state.contacts.map(home => <div key={shortid.generate()}>{home.name}</div>)}\n            </Section>\n        )\n    }\n}\n\nexport default Contacts\n","import React, { Component } from 'react'\nimport shortid from 'shortid'\nimport Contacts from './contacts'\nconst INITIAL_STATE = {\n    contacts: [\n        { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n        { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n        { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n        { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n    name: '',\n    number: ''\n}\nclass Form extends Component {\n    state = {\n        ...INITIAL_STATE\n    }\n\n    number = shortid.generate()\n\n    addContact = e => {\n        e.preventDefault()\n        const { name } = e.target\n        const contact = {\n            \"name\": name.value,\n            \"id\": shortid.generate()\n        }\n        this.setState({ contacts: [...this.state.contacts, contact] })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <form action=\"\" onSubmit={this.addContact}>\n\n                    <label htmlFor=\"name\">\n                        Name\n                    <input type=\"text\" id=\"name\" onChange={this.handleChange} />\n                    </label>\n                    <br />\n\n                    <button type=\"submit\">Add contact</button>\n                </form>\n                <Contacts state={this.state} />\n            </div>\n\n        )\n    }\n}\n\nexport default Form\n","import './App.css';\nimport { Component } from 'react'\nimport Form from './components/form.js'\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    name: ''\n  }\n\n  render() {\n    return (\n      <Form state={this.state} />\n\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}